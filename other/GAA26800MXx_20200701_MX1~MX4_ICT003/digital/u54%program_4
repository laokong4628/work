!!!!    6    0    1 1274882830  V59af                                         
! IPG: rev 07.20sc Wed Jun 10 08:32:23 2009

!-----------------------------------------------------------------------
!  Copyright (c) Hewlett-Packard Co. 1992
!
!  All Rights Reserved.  Reproduction, adaptation, or translation
!  without prior written permission is prohibited, except as allowed
!  under the copyright laws.
!
!-----------------------------------------------------------------------
!
! Device:        24xx128
! Manufacturer:  Microchip
! Description:   128 * 8 bit EEPROM I^2 C Compatible
! Package:       8 pin SOIC
! Test Platform: 3070
! Safeguard:     standard_cmos
!
!-----------------------------------------------------------------------
!
! Additional Comments:
!
!-----------------------------------------------------------------------

test digital;Data(*)

vector cycle 10u
receive delay 9u

default device "u54"

set terminators to on
assign   VCC to pins   *
assign   GND to pins   *

assign   A0  to pins  *
assign   A1  to pins  *
assign   A2  to pins  *

assign   WP  to pins *  default "0"
assign WP_1     to nodes"OUT_EN_INV" default "1"

assign   SCL to pins  6
assign   SDA to pins  5
assign   SDA_In to pins  5

variable Data(*) to groups SDA_In

family TTL

power VCC,GND

inputs        A0, A1, A2, SCL, WP, WP_1
bidirectional SDA, SDA_In

disable SDA, SDA_In with SCL to "1"


! ******************************************************************************
!  VECTORS
! ******************************************************************************

vector  Init
   drive SDA
   drive SDA_In
   set   WP_1                 to "1"
   set   SCL                  to "1"
   set   SDA                  to "1"
   set   SDA_In               to "1"
   set   A0                   to "0"
   set   A1                   to "1"
   set   A2                   to "0"
end vector

vector  KEEP
   drive SDA
   drive SDA_In
   set   SCL                  to "k"
   set   SDA                  to "k"
   set   SDA_In               to "k"
   set   A0                   to "k"
   set   A1                   to "k"
   set   A2                   to "k"
end vector

vector  KEEP_Read
!!   drive SDA
   set   SCL                  to "k"
!!   set   SDA                  to "k"
   set   A0                   to "k"
   set   A1                   to "k"
   set   A2                   to "k"
end vector

vector  Address_000
   initialize                 to Keep
   set   A0                   to "0"
   set   A1                   to "1"
   set   A2                   to "0"
end vector

vector  Address_111
   initialize                 to Keep
   set   A0                   to "1"
   set   A1                   to "1"
   set   A2                   to "1"
end vector

vector  Begin
   initialize                 to Keep
   drive SDA
   set   SDA                  to "1"
   set   SCL                  to "1"
end vector

vector  Start
   initialize                 to Keep
   drive SDA
   set   SCL                  to "1"
   set   SDA                  to "0"
end vector

vector  Stop
   initialize                 to Keep
   drive SDA
   set   SCL                  to "1"
   set   SDA                  to "1"
end vector

vector  Stop_1
   initialize                 to Keep
   drive SDA
   set   SCL                  to "1"
   set   SDA                  to "0"
end vector

vector  Stop_2
   initialize                 to Keep
   drive SDA
   set   SCL                  to "1"
   set   SDA                  to "1"
end vector

vector  SCL_0
   initialize                 to Keep
   drive SDA
   set   SCL                  to "0"
   set   SDA                  to "k"
end vector

vector  SCL_0_D_0
   initialize                 to Keep
   drive SDA
   set   SCL                  to "0"
   set   SDA                  to "0"
end vector

vector  SCL_1
   initialize                 to Keep
   drive SDA
   set   SCL                  to "1"
   set   SDA                  to "k"
end vector

vector  Dd_0
   initialize                 to Keep
   drive SDA
   set   SCL                  to "k"
   set   SDA                  to "0"
end vector

vector  Dd_In
   initialize                 to Keep
   drive SDA_In
   set   SCL                  to "k"
   set   SDA_In               to "0"
end vector

vector  Dd_1
   initialize                 to Keep
   drive SDA
   set   SCL                  to "k"
   set   SDA                  to "1"
end vector

vector  SCL_0_D_X
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "0"
   set   SDA                  to "x"
end vector

vector  SCL_1_D_X
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "1"
   set   SDA                  to "x"
end vector

vector  ACK_S0
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "1"
   set   SDA                  to "0"
end vector

vector  SCL_R_0
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "0"
   set   SDA                  to "x"
end vector

vector  SCL_R_1
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "1"
   set   SDA                  to "x"
end vector

vector  Dr_0
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "k"
   set   SDA                  to "0"
end vector

vector  Dr_1
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "k"
   set   SDA                  to "1"
end vector

vector  ACK_M0
   initialize                 to Keep
   drive SDA
   set   SCL                  to "k"
   set   SDA                  to "0"
end vector

vector  ACK_M1
   initialize                 to Keep
   receive  SDA
   set   SCL                  to "k"
   set   SDA                  to "1"
end vector

vector  RW_0
   initialize                 to Keep
   drive SDA
   set   SCL                  to "k"
   set   SDA                  to "0"
end vector

vector  RW_1
   initialize                 to Keep
   drive SDA
   set   SCL                  to "k"
   set   SDA                  to "1"
end vector

vector  SCL_1_D_0
   initialize                 to Keep
   drive SDA
   set   SCL                  to "1"
   set   SDA                  to "0"
end vector

! ******************************************************************************
! FILE
! ******************************************************************************
   data Data_Block to groups SDA_In
     values   Data(0:127)
   end data


! ******************************************************************************
!  SUBS
! ******************************************************************************

sub  IC_Address_000 (RW)
   execute  SCL_0
   execute  Dd_1     !1
   execute  SCL_1
   execute  SCL_0
   execute  Dd_0     !0
   execute  SCL_1
   execute  SCL_0
   execute  Dd_1     !1
   execute  SCL_1
   execute  SCL_0
   execute  Dd_0     !0
   execute  SCL_1
   execute  SCL_0
   execute  Dd_0     !0
   execute  SCL_1
   execute  SCL_0
   execute  Dd_1     !0
   execute  SCL_1
   execute  SCL_0
   execute  Dd_0     !0
   execute  SCL_1
   execute  SCL_0
   execute  RW       !RW
   execute  SCL_1
   execute  SCL_0_D_X
   execute  SCL_1_D_X
   execute  Ack_S0         !ACK von Slave
   execute  SCL_0_D_X
end sub

sub  Word_Address (D0,D1,D2,D3,D4,D5,D6,D7)
   execute  D0
   execute  SCL_1
   execute  SCL_0
   execute  D1
   execute  SCL_1
   execute  SCL_0
   execute  D2
   execute  SCL_1
   execute  SCL_0
   execute  D3
   execute  SCL_1
   execute  SCL_0
   execute  D4
   execute  SCL_1
   execute  SCL_0
   execute  D5
   execute  SCL_1
   execute  SCL_0
   execute  D6
   execute  SCL_1
   execute  SCL_0
   execute  D7
   execute  SCL_1
   execute  SCL_0_D_X
   execute  SCL_1_D_X
   execute  ACK_S0            !Ack von Slave
   execute  SCL_0_D_X
end sub

sub  Write_Data (D0,D1,D2,D3,D4,D5,D6,D7)
   execute  D0
   execute  SCL_1
   execute  SCL_0
   execute  D1
   execute  SCL_1
   execute  SCL_0
   execute  D2
   execute  SCL_1
   execute  SCL_0
   execute  D3
   execute  SCL_1
   execute  SCL_0
   execute  D4
   execute  SCL_1
   execute  SCL_0
   execute  D5
   execute  SCL_1
   execute  SCL_0
   execute  D6
   execute  SCL_1
   execute  SCL_0
   execute  D7
   execute  SCL_1
   execute  SCL_0_D_X
   execute  SCL_1_D_X
   execute  ACK_S0
   execute  SCL_0_D_X
!DEI   execute  Dd_0      !DEI???
end sub

sub  Read_Data (D0,D1,D2,D3,D4,D5,D6,D7)
   execute  SCL_R_1
   execute  D0
   execute  SCL_R_0
   execute  SCL_R_1
   execute  D1
   execute  SCL_R_0
   execute  SCL_R_1
   execute  D2
   execute  SCL_R_0
   execute  SCL_R_1
   execute  D3
   execute  SCL_R_0
   execute  SCL_R_1
   execute  D4
   execute  SCL_R_0
   execute  SCL_R_1
   execute  D5
   execute  SCL_R_0
   execute  SCL_R_1
   execute  D6
   execute  SCL_R_0
   execute  SCL_R_1
   execute  D7
   execute  SCL_0_D_X
!DEI   execute  ACK_M0            !Ack von Master
   execute  ACK_M1            !Ack von Master
   execute  SCL_1_D_0
   execute  SCL_0_D_X
end sub

sub  IC_Address_111 (RW)
   execute  SCL_0
   execute  Dd_1
   execute  SCL_1
   execute  SCL_0
   execute  Dd_0
   execute  SCL_1
   execute  SCL_0
   execute  Dd_1
   execute  SCL_1
   execute  SCL_0
   execute  Dd_0
   execute  SCL_1
   execute  SCL_0
   execute  Dd_1
   execute  SCL_1
   execute  SCL_0
   execute  Dd_1
   execute  SCL_1
   execute  SCL_0
   execute  Dd_1
   execute  SCL_1
   execute  SCL_0
   execute  RW
   execute  SCL_1
   execute  SCL_0_D_X
   execute  SCL_1_D_X
   execute  Ack_S0         !ACK von Slave
   execute  SCL_0_D_X
end sub

! ******************************************************************************
!  UNITS
! ******************************************************************************

!DEI unit  "Slave Address 000"
!DEI    execute  Init         !c=1 d=1 Add=000
!DEI    execute  Start   ! c=1 d=0  Drive d Low
!DEI
!DEI    call  IC_Address_000 (RW_0)  !address device, write mode
!DEI
!DEI    !Address High Byte
!DEI    call  Word_Address  (Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0)
!DEI    !Address Low Byte
!DEI    call  Word_Address  (Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0)
!DEI
!DEI    call  Write_Data (Dd_0,Dd_1,Dd_0,Dd_1,Dd_0,Dd_1,Dd_0,Dd_1)
!DEI    call  Write_Data (Dd_1,Dd_0,Dd_1,Dd_0,Dd_1,Dd_0,Dd_1,Dd_0)
!DEI    call  Write_Data (Dd_0,Dd_1,Dd_0,Dd_1,Dd_0,Dd_1,Dd_0,Dd_1)
!DEI    call  Write_Data (Dd_1,Dd_0,Dd_1,Dd_0,Dd_1,Dd_0,Dd_1,Dd_0)
!DEI
!DEI    execute  Stop
!DEI
!DEI    execute  Begin
!DEI    execute  Start
!DEI
!DEI    call  IC_Address_000 (RW_0)
!DEI    !Address High Byte
!DEI    call  Word_Address (Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0)
!DEI    !Address Low Byte
!DEI    call  Word_Address (Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0)
!DEI
!DEI    execute  Begin
!DEI    execute  Start
!DEI
!DEI    call  IC_Address_000 (RW_1)
!DEI    call  Read_Data(Dr_0,Dr_1,Dr_0,Dr_1,Dr_0,Dr_1,Dr_0,Dr_1)
!DEI    call  Read_Data(Dr_1,Dr_0,Dr_1,Dr_0,Dr_1,Dr_0,Dr_1,Dr_0)
!DEI    call  Read_Data(Dr_0,Dr_1,Dr_0,Dr_1,Dr_0,Dr_1,Dr_0,Dr_1)
!DEI    call  Read_Data(Dr_1,Dr_0,Dr_1,Dr_0,Dr_1,Dr_0,Dr_1,Dr_0)
!DEI
!DEI    execute  Stop
!DEI
!DEI end unit

unit "Write Data" !! 128k bytes total

!  64 byte page write
!! #################################################################
!! 0 - 63
!! 0000 - 003F

   execute  Init         !c=1 d=1 Add=000
   execute  Begin
   execute  Start   ! c=1 d=0  Drive d Low

   call  IC_Address_000 (RW_0)  !address device, write mode

   !Address High Byte
   call  Word_Address  (Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0,Dd_1)
   !Address Low Byte
   call  Word_Address  (Dd_0,Dd_0,Dd_1,Dd_0,Dd_0,Dd_0,Dd_0,Dd_0)

repeat 16 times
   execute Dd_In drive data Data_Block  !D0
   execute  SCL_1
   execute  SCL_0
   next Data_Block

   execute Dd_In drive data Data_Block  !D1
   execute  SCL_1
   execute  SCL_0
   next Data_Block

   execute Dd_In drive data Data_Block  !D2
   execute  SCL_1
   execute  SCL_0
   next Data_Block

   execute Dd_In drive data Data_Block  !D3
   execute  SCL_1
   execute  SCL_0
   next Data_Block

   execute Dd_In drive data Data_Block  !D4
   execute  SCL_1
   execute  SCL_0
   next Data_Block

   execute Dd_In drive data Data_Block  !D5
   execute  SCL_1
   execute  SCL_0
   next Data_Block

   execute Dd_In drive data Data_Block  !D6
   execute  SCL_1
   execute  SCL_0
   next Data_Block

   execute Dd_In drive data Data_Block  !D7
   execute  SCL_1
   execute  SCL_0_D_X
   execute  SCL_1_D_X
   execute  ACK_S0
   execute  SCL_0_D_0
   next Data_Block
end repeat

   execute Stop_1
   execute Stop_2

repeat 500 times
   execute SCL_0
end repeat

end unit

!
!  End of test
!

