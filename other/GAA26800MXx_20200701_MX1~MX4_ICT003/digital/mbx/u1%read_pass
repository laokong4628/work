!!!!    6    0    1 1226660219   0000                                         
test digital

sequential

vector cycle  5u ! chip requires 4.7 uS minimum
receive delay 4.5u

default device "u1%read"
set terminators to on
assign GND    to pins *
assign VCC    to pins *

assign Address    to pins *,*,* ! A2 A1 A0

assign SDA    to pins 5
assign SCL    to pins 6

assign WP     to pins 7

assign WP_1     to nodes"OUT_EN" default "1"


inputs  Address, WP,SCL,WP_1
bidirectional SDA
power GND, VCC

family CMOS

set ref on groups SDA, SCL, Address to dh 4.5, dl 0    ! Nominal supply voltages.
set ref on groups SDA to rh2.4, rl1.0
set load on groups SDA to no load ! pull up on board

pcf order is WP, Address, SCL, SDA

!
!--------- vectors ---------------------------------------
!

vector  Initialize_Inputs
   drive SDA
   set   WP          to "0"  ! Normal (not protected) operation. !tied low
   set   WP_1        to "1"
   set   SDA         to "1"
   set   SCL         to "1"
   set   Address     to "001"
end vector

vector  Keep
   receive SDA
   set   WP          to "0"
   set   SDA         to "x"
   set   SCL         to "k"
   set   Address     to "kkk"
end vector

vector  Keep_DR
   drive SDA
   set   WP          to "0"
   set   SDA         to "k"
   set   SCL         to "k"
   set   Address     to "kkk"
end vector

vector  Address_in
   initialize        to Keep_DR
   set   Address     to "kkk"
end vector

vector Din_X
   initialize to Keep_DR
   set SDA               to "x"
end vector

vector Din_1
   initialize to Keep_DR
   drive SDA
   set SDA               to "1"
end vector

vector Din_0
   initialize to Keep_DR
   drive SDA
   set SDA               to "0"
end vector

vector Dout_1
   initialize to Keep_DR
   receive SDA
   set SDA               to "1"
end vector

vector Dout_0
   initialize to Keep_DR
   receive SDA
   set SDA               to "0"
end vector

vector Dout_X
   initialize to Keep_DR
   receive SDA
   set SDA               to "x"
end vector


vector  Data_In
   initialize        to Keep_DR
   set   SDA         to "x"
end vector

vector  Data_In_Read
   initialize        to Keep
   set   SDA         to "k"
end vector

vector  Ack_lo
   initialize        to Keep
   receive SDA  !@!jin for read
   set   SDA         to "0"
end vector

vector  Ack_hi
   initialize        to Keep
    receive SDA         !@!jin for read
   set   SDA         to "1"
end vector

vector  Ack_lo_Read
   initialize        to Keep
   drive SDA  !@!jin for read
   set   SDA         to "0"
end vector

vector  Ack_hi_Read
   initialize        to Keep
    drive SDA         !@!jin for read
   set   SDA         to "1"
end vector

vector  Clock
   initialize        to Keep_DR
   set   SCL         to "t"
end vector

vector  Clock_read
   initialize        to Keep
   set   SCL         to "t"
end vector

vector  Clock_hi
   initialize        to Keep_DR
   set   SCL         to "1"
end vector

vector  Clock_lo
   initialize        to Keep_DR
   set   SCL         to "0"
end vector

vector  WP_hi
   initialize        to Keep_DR
   set   WP          to "1"
end vector

vector  WP_lo
   initialize        to Keep_DR
   set   WP          to "0"
end vector

vector  SDA_hi
   initialize        to Keep_DR
   set   SDA         to "1"
end vector

vector  SDA_lo
   initialize        to Keep_DR
   set   SDA         to "0"
end vector

!*******************************************************************
!*********************      DATA SECTION       *********************
!*******************************************************************



!*******************************************************************
!*******************    SUBROUTINE SECTION     *********************
!*******************************************************************

sub  Device_Address  ! Sends the address that was set up in  Initialize_inputs

   execute  SDA_hi      ! "1"     !
   execute  Clock                 !
   execute  Clock                 !
   execute  SDA_lo      ! "0"     !
   execute  Clock                 ! Device type identifier is always "1010"
   execute  Clock                 !
   execute  SDA_hi      ! "1"     !
   execute  Clock                 !
   execute  Clock                 !
   execute  SDA_lo      ! "0"     !
   execute  Clock
   execute  Clock
   execute  SDA_hi!@!lo      ! A2      ! << customise device address if necessary
   execute  Clock                 !
   execute  Clock                 !
   execute  SDA_lo      ! A1      ! << customise device address if necessary
   execute  Clock                 !
   execute  Clock                 !
   execute  SDA_lo!@!hi      ! A0      ! << customise device address if necessary
   execute  Clock                 !
   execute  Clock                 !

end sub


!------------------------------------------------------------------------------


sub  Start
   execute SDA_hi
   execute Clock_hi
   execute SDA_lo
   execute Clock_lo
end sub

sub  Stop
   execute SDA_lo
   execute Clock_hi
   execute SDA_hi
end sub

sub  Ack
   execute Clock_read
   execute Ack_lo
   execute Clock_read
end sub

sub  No_Ack
   execute Clock_read
   execute Ack_hi
   execute Clock_read
end sub

sub  Ack_Read
   execute Clock_read
   execute Ack_lo_Read
   execute Clock_read
end sub

sub  No_Ack_Read
   execute Clock_read
   execute Ack_hi_Read
   execute Clock_read
end sub


sub  Write
   execute  SDA_lo
   execute  Clock
   execute  Clock
end sub

sub  Read
   execute  SDA_hi
   execute  Clock
   execute  Clock
end sub


sub Address_Word(D7,D6,D5,D4,D3,D2,D1,D0)
      execute D7!@!X drive data Address
      execute Clock
      execute Clock

      execute D6!@!X drive data Address
      execute Clock
      execute Clock

      execute D5!@!X drive data Address
      execute Clock
      execute Clock

      execute D4!@!X drive data Address
      execute Clock
      execute Clock

      execute D3!@!X drive data Address
      execute Clock
      execute Clock

      execute D2!@!X drive data Address
      execute Clock
      execute Clock

      execute D1!@!X drive data Address
      execute Clock
      execute Clock

      execute D0!@!X drive data Address  !@! bit 8
      execute Clock
      execute Clock
end sub

!------------------------------------------------------------------------------

unit "Test: Byte 0"

   execute Initialize_inputs
   !-----------------------------------------------------------
   ! Perform a dummy write in order to set up the read address.
   call Start
   call Device_Address ! This address must match the address that
                       ! was set up during Initialize_inputs
   call Write
   call Ack
   call Address_Word(Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_1)
   call Ack
   call Address_Word(Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_0)  !@!0000H
   call Ack
   !-----------------------------------------------------------
   ! Now that the read address has been set up, start the read.
   call Start          ! Start after end of dummy write
   call Device_Address ! This address must match the address that
                       ! was set up during Initialize_inputs
   call Read
   call Ack
   repeat 8 times             ! DATA         !@!1th Byte
      execute Dout_0!X receive data  Data
      execute Clock_read
      execute Clock_read
!        next Data
   end repeat
   call No_Ack_Read         ! Require a no-ack condition here.
   call Stop
  wait 100m
end unit

unit "Test: Byte 1"

   execute Initialize_inputs
   !-----------------------------------------------------------
   ! Perform a dummy write in order to set up the read address.
   call Start
   call Device_Address ! This address must match the address that
                       ! was set up during Initialize_inputs
   call Write
   call Ack
   call Address_Word(Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_1)
   call Ack
   call Address_Word(Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_0,Din_1)  !@!0001H
   call Ack
   !-----------------------------------------------------------
   ! Now that the read address has been set up, start the read.
   call Start          ! Start after end of dummy write
   call Device_Address ! This address must match the address that
                       ! was set up during Initialize_inputs
   call Read
   call Ack
   repeat 8 times             ! DATA         !@!1th Byte
      execute Dout_0!X receive data  Data
      execute Clock_read
      execute Clock_read
!        next Data
   end repeat
   call No_Ack_Read         ! Require a no-ack condition here.
   call Stop
  wait 100m
end unit


!
!  End of test
!

